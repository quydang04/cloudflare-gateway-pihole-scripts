name: Update Filter Lists

on:
  schedule:
    # Run at 00:00 UTC+7 every 3 days (17:00 UTC c·ªßa ng√†y tr∆∞·ªõc ƒë√≥)
    - cron: "0 17 */3 * *"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  SUMMARY_FILE: /tmp/filter_update_summary.txt

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"
          
      - name: Prepare Summary File
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          echo "# B√°o c√°o c·∫≠p nh·∫≠t Cloudflare Gateway filter lists" > $SUMMARY_FILE
          echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $VIETNAM_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "----------------------------" >> $SUMMARY_FILE

      - name: Send Start Notification
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t Cloudflare Gateway filter lists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: |
          npm ci
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ ƒê√£ c√†i ƒë·∫∑t c√°c dependencies v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download allowlists
        id: download-allowlist
        run: |
          # Capture output for analysis
          OUTPUT=$(npm run download:allowlist 2>&1)
          echo "$OUTPUT"
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng link trong bi·∫øn ALLOWLIST_URLS
          if [ -n "$ALLOWLIST_URLS" ]; then
            # ƒê·∫øm s·ªë d√≤ng kh√¥ng tr·ªëng trong bi·∫øn ALLOWLIST_URLS
            FILTER_COUNT=$(echo "$ALLOWLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "S·ªë l∆∞·ª£ng link allowlist: $FILTER_COUNT"
          
          # Add to summary
          echo "Allowlist filters: $FILTER_COUNT" >> $SUMMARY_FILE
          echo "ALLOWLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng domain trong file
          if [ -f "./allowlist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./allowlist.txt | tr -d ' ')
          elif [ -f "./output/allowlist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./output/allowlist.txt | tr -d ' ')
          elif [ -f "./dist/allowlist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./dist/allowlist.txt | tr -d ' ')
          else
            # T√¨m b·∫•t k·ª≥ file n√†o c√≥ t√™n ch·ª©a "allowlist"
            ALLOWLIST_FILE=$(find . -name "*allowlist*" -type f | head -n 1)
            if [ -n "$ALLOWLIST_FILE" ]; then
              DOMAIN_COUNT=$(wc -l < "$ALLOWLIST_FILE" | tr -d ' ')
            else
              DOMAIN_COUNT="0"
            fi
          fi
          
          echo "S·ªë domain trong allowlist: $DOMAIN_COUNT"
          echo "ALLOWLIST_DOMAINS=$DOMAIN_COUNT" >> $GITHUB_ENV
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Notify Allowlists Downloaded
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng ${{ env.ALLOWLIST_COUNT }} filters trong allowlists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download blocklists
        id: download-blocklist
        run: |
          # Capture output for analysis
          OUTPUT=$(npm run download:blocklist 2>&1)
          echo "$OUTPUT"
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng link trong bi·∫øn BLOCKLIST_URLS
          if [ -n "$BLOCKLIST_URLS" ]; then
            # ƒê·∫øm s·ªë d√≤ng kh√¥ng tr·ªëng trong bi·∫øn BLOCKLIST_URLS
            FILTER_COUNT=$(echo "$BLOCKLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "S·ªë l∆∞·ª£ng link blocklist: $FILTER_COUNT"
          
          # Add to summary
          echo "Blocklist filters: $FILTER_COUNT" >> $SUMMARY_FILE
          echo "BLOCKLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng domain trong file
          if [ -f "./blocklist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./blocklist.txt | tr -d ' ')
          elif [ -f "./output/blocklist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./output/blocklist.txt | tr -d ' ')
          elif [ -f "./dist/blocklist.txt" ]; then
            DOMAIN_COUNT=$(wc -l < ./dist/blocklist.txt | tr -d ' ')
          else
            # T√¨m b·∫•t k·ª≥ file n√†o c√≥ t√™n ch·ª©a "blocklist"
            BLOCKLIST_FILE=$(find . -name "*blocklist*" -type f | head -n 1)
            if [ -n "$BLOCKLIST_FILE" ]; then
              DOMAIN_COUNT=$(wc -l < "$BLOCKLIST_FILE" | tr -d ' ')
            else
              DOMAIN_COUNT="0"
            fi
          fi
          
          echo "S·ªë domain trong blocklist: $DOMAIN_COUNT"
          echo "BLOCKLIST_DOMAINS=$DOMAIN_COUNT" >> $GITHUB_ENV
          
          # T√≠nh t·ªïng s·ªë domains
          TOTAL_DOMAINS=$((DOMAIN_COUNT + ${ALLOWLIST_DOMAINS:-0}))
          echo "TOTAL_DOMAINS=$TOTAL_DOMAINS" >> $GITHUB_ENV
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Notify Blocklists Downloaded
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng ${{ env.BLOCKLIST_COUNT }} filters trong blocklists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Delete old rules and lists
        id: delete-rules
        run: |
          # Th·ª±c hi·ªán l·ªánh x√≥a
          npm run cloudflare-delete
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Delete Completed Notification
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üóëÔ∏è ƒê√£ x√≥a c√°c filters c≈© v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Create new rules and lists
        id: create-rules
        run: |
          # Th·ª±c hi·ªán l·ªánh t·∫°o
          npm run cloudflare-create
          
          # S·ª≠ d·ª•ng t·ªïng s·ªë domain ƒë√£ ƒë·∫øm tr∆∞·ªõc ƒë√≥
          ADDED_DOMAINS="${{ env.TOTAL_DOMAINS }}"
          if [ -z "$ADDED_DOMAINS" ]; then
            ADDED_DOMAINS="0"
          fi
          
          # Add to summary
          echo "Added domains: $ADDED_DOMAINS" >> $SUMMARY_FILE
          echo "ADDED_DOMAINS=$ADDED_DOMAINS" >> $GITHUB_ENV
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Create Completed Notification
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üÜï ƒê√£ th√™m ${{ env.ADDED_DOMAINS }} filters v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Generate Final Summary
        if: always()
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          echo "----------------------------" >> $SUMMARY_FILE
          echo "Th·ªùi gian ho√†n th√†nh: $VIETNAM_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "Tr·∫°ng th√°i: ${{ job.status }}" >> $SUMMARY_FILE
          
          # Format summary for Telegram
          SUMMARY=$(cat $SUMMARY_FILE)
          
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="ho√†n th√†nh"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="th·∫•t b·∫°i"
          fi
          
          # Fix: Simplify message creation by using single quotes and avoiding backticks in YAML
          echo "${STATUS_EMOJI} Qu√° tr√¨nh c·∫≠p nh·∫≠t Cloudflare Gateway filter lists ƒë√£ ${STATUS_TEXT}" > /tmp/final_message.txt
          echo "" >> /tmp/final_message.txt  # Empty line
          echo "üìä *B√°o c√°o t√≥m t·∫Øt:*" >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues
          cat $SUMMARY_FILE >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues

      - name: Send Final Summary
        if: always()
        run: |
          # Send the full report using Markdown format
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat /tmp/final_message.txt)" \
            -d parse_mode=Markdown

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
