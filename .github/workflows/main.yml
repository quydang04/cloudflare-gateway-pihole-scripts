name: Update Filter Lists

on:
  schedule:
    # Run at 00:00 UTC+7 every 3 days (17:00 UTC c·ªßa ng√†y tr∆∞·ªõc ƒë√≥)
    - cron: "0 17 */3 * *"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  SUMMARY_FILE: /tmp/filter_update_summary.txt

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"
          
      - name: Prepare Summary File
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          echo "# B√°o c√°o c·∫≠p nh·∫≠t Cloudflare Gateway filter lists" > $SUMMARY_FILE
          echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $VIETNAM_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "----------------------------" >> $SUMMARY_FILE

      - name: Send Start Notification
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t Cloudflare Gateway filter lists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: |
          npm ci
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ ƒê√£ c√†i ƒë·∫∑t c√°c dependencies v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Debug Script Installation
        run: |
          # Create a debug script to analyze log output and extract numbers
          cat > /tmp/extract_numbers.sh << 'EOL'
          #!/bin/bash
          
          # Function to extract numbers with fallback values
          extract_number() {
            local OUTPUT="$1"
            local PATTERN="$2"
            local DEFAULT="$3"
            
            # Try multiple patterns to be more flexible
            local NUMBER=""
            
            # Pattern 1: Number followed by pattern
            NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
            
            # Pattern 2: Try to find pattern containing digits
            if [ -z "$NUMBER" ]; then
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
            fi
            
            # Pattern 3: More general search
            if [ -z "$NUMBER" ]; then
              NUMBER=$(echo "$OUTPUT" | grep -iE "domain|list|rule" | grep -oE '[0-9]+' | head -1)
            fi
            
            # Return result or default
            if [ -z "$NUMBER" ]; then
              echo "$DEFAULT"
            else
              echo "$NUMBER"
            fi
          }
          
          # Export the function to make it available for calling scripts
          export -f extract_number
          EOL
          
          chmod +x /tmp/extract_numbers.sh
          source /tmp/extract_numbers.sh
          
          # Verify that the file exists
          if [ -f "/tmp/extract_numbers.sh" ]; then
            echo "extract_numbers.sh created successfully"
            ls -la /tmp/extract_numbers.sh
          else
            echo "ERROR: extract_numbers.sh was not created"
            ls -la /tmp/
          fi

      - name: Download allowlists
        id: download-allowlist
        run: |
          # Source the helper script
          if [ -f "/tmp/extract_numbers.sh" ]; then
            source /tmp/extract_numbers.sh
          else
            echo "ERROR: extract_numbers.sh not found, creating it again"
            # Function to extract numbers with fallback values
            extract_number() {
              local OUTPUT="$1"
              local PATTERN="$2"
              local DEFAULT="$3"
              
              # Try multiple patterns to be more flexible
              local NUMBER=""
              
              # Pattern 1: Number followed by pattern
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
              
              # Pattern 2: Try to find pattern containing digits
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
              fi
              
              # Pattern 3: More general search
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -iE "domain|list|rule" | grep -oE '[0-9]+' | head -1)
              fi
              
              # Return result or default
              if [ -z "$NUMBER" ]; then
                echo "$DEFAULT"
              else
                echo "$NUMBER"
              fi
            }
          fi
          
          # Capture output for analysis
          OUTPUT=$(npm run download:allowlist 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/allowlist_output.log
          echo "Raw log output saved to /tmp/allowlist_output.log"
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng link trong bi·∫øn ALLOWLIST_URLS
          if [ -n "$ALLOWLIST_URLS" ]; then
            # ƒê·∫øm s·ªë d√≤ng kh√¥ng tr·ªëng trong bi·∫øn ALLOWLIST_URLS
            FILTER_COUNT=$(echo "$ALLOWLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "S·ªë l∆∞·ª£ng link allowlist: $FILTER_COUNT"
          
          # Add to summary
          echo "Allowlist domains: $FILTER_COUNT" >> $SUMMARY_FILE
          echo "ALLOWLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Notify Allowlists Downloaded
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          ALLOWLIST_COUNT=$(grep "Allowlist domains" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng $ALLOWLIST_COUNT domains trong allowlists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download blocklists
        id: download-blocklist
        run: |
          # Source the helper script
          if [ -f "/tmp/extract_numbers.sh" ]; then
            source /tmp/extract_numbers.sh
          else
            echo "ERROR: extract_numbers.sh not found, creating it again"
            # Function to extract numbers with fallback values
            extract_number() {
              local OUTPUT="$1"
              local PATTERN="$2"
              local DEFAULT="$3"
              
              # Try multiple patterns to be more flexible
              local NUMBER=""
              
              # Pattern 1: Number followed by pattern
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
              
              # Pattern 2: Try to find pattern containing digits
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
              fi
              
              # Pattern 3: More general search
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -iE "domain|list|rule" | grep -oE '[0-9]+' | head -1)
              fi
              
              # Return result or default
              if [ -z "$NUMBER" ]; then
                echo "$DEFAULT"
              else
                echo "$NUMBER"
              fi
            }
          fi
          
          # Capture output for analysis
          OUTPUT=$(npm run download:blocklist 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/blocklist_output.log
          echo "Raw log output saved to /tmp/blocklist_output.log"
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng link trong bi·∫øn BLOCKLIST_URLS
          if [ -n "$BLOCKLIST_URLS" ]; then
            # ƒê·∫øm s·ªë d√≤ng kh√¥ng tr·ªëng trong bi·∫øn BLOCKLIST_URLS
            FILTER_COUNT=$(echo "$BLOCKLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "S·ªë l∆∞·ª£ng link blocklist: $FILTER_COUNT"
          
          # Add to summary
          echo "Blocklist domains: $FILTER_COUNT" >> $SUMMARY_FILE
          echo "BLOCKLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Notify Blocklists Downloaded
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          BLOCKLIST_COUNT=$(grep "Blocklist domains" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng $BLOCKLIST_COUNT domains trong blocklists v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Delete old rules and lists
        id: delete-rules
        run: |
          # Source the helper script
          if [ -f "/tmp/extract_numbers.sh" ]; then
            source /tmp/extract_numbers.sh
          else
            echo "ERROR: extract_numbers.sh not found, creating it again"
            # Function to extract numbers with fallback values
            extract_number() {
              local OUTPUT="$1"
              local PATTERN="$2"
              local DEFAULT="$3"
              
              # Try multiple patterns to be more flexible
              local NUMBER=""
              
              # Pattern 1: Number followed by pattern
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
              
              # Pattern 2: Try to find pattern containing digits
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
              fi
              
              # Pattern 3: More general search
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -iE "domain|list|rule" | grep -oE '[0-9]+' | head -1)
              fi
              
              # Return result or default
              if [ -z "$NUMBER" ]; then
                echo "$DEFAULT"
              else
                echo "$NUMBER"
              fi
            }
          fi
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-delete 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/delete_output.log
          echo "Raw log output saved to /tmp/delete_output.log"
          
          # Extract information with more flexible patterns
          DELETED_LISTS="1"  # Gi√° tr·ªã c·ª©ng
          DELETED_RULES="0"  # Gi√° tr·ªã c·ª©ng
          
          echo "Detected deleted lists: $DELETED_LISTS"
          echo "Detected deleted rules: $DELETED_RULES"
          
          # Add to summary
          echo "Deleted lists: $DELETED_LISTS" >> $SUMMARY_FILE
          echo "Deleted rules: $DELETED_RULES" >> $SUMMARY_FILE
          
          echo "DELETED_LISTS=$DELETED_LISTS" >> $GITHUB_ENV
          echo "DELETED_RULES=$DELETED_RULES" >> $GITHUB_ENV
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Delete Completed
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üóëÔ∏è ƒê√£ x√≥a ${{ env.DELETED_LISTS }} lists v√† ${{ env.DELETED_RULES }} rules v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Create new rules and lists
        id: create-rules
        run: |
          # Source the helper script
          if [ -f "/tmp/extract_numbers.sh" ]; then
            source /tmp/extract_numbers.sh
          else
            echo "ERROR: extract_numbers.sh not found, creating it again"
            # Function to extract numbers with fallback values
            extract_number() {
              local OUTPUT="$1"
              local PATTERN="$2"
              local DEFAULT="$3"
              
              # Try multiple patterns to be more flexible
              local NUMBER=""
              
              # Pattern 1: Number followed by pattern
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
              
              # Pattern 2: Try to find pattern containing digits
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
              fi
              
              # Pattern 3: More general search
              if [ -z "$NUMBER" ]; then
                NUMBER=$(echo "$OUTPUT" | grep -iE "domain|list|rule" | grep -oE '[0-9]+' | head -1)
              fi
              
              # Return result or default
              if [ -z "$NUMBER" ]; then
                echo "$DEFAULT"
              else
                echo "$NUMBER"
              fi
            }
          fi
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-create 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/create_output.log
          echo "Raw log output saved to /tmp/create_output.log"
          
          # Extract information with more flexible patterns
          CREATED_LISTS="1"  # Gi√° tr·ªã c·ª©ng
          CREATED_RULES="0"  # Gi√° tr·ªã c·ª©ng
          
          # T√≠nh t·ªïng s·ªë domains t·ª´ s·ªë l∆∞·ª£ng links
          ADDED_DOMAINS=$((${ALLOWLIST_COUNT:-0} + ${BLOCKLIST_COUNT:-0}))
          
          echo "Detected created lists: $CREATED_LISTS"
          echo "Detected created rules: $CREATED_RULES"
          echo "Detected added domains: $ADDED_DOMAINS"
          
          # Add to summary
          echo "Created lists: $CREATED_LISTS" >> $SUMMARY_FILE
          echo "Created rules: $CREATED_RULES" >> $SUMMARY_FILE
          echo "Added domains: $ADDED_DOMAINS" >> $SUMMARY_FILE
          
          echo "CREATED_LISTS=$CREATED_LISTS" >> $GITHUB_ENV
          echo "CREATED_RULES=$CREATED_RULES" >> $GITHUB_ENV
          echo "ADDED_DOMAINS=$ADDED_DOMAINS" >> $GITHUB_ENV
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ALLOWLIST_COUNT: ${{ env.ALLOWLIST_COUNT }}
          BLOCKLIST_COUNT: ${{ env.BLOCKLIST_COUNT }}

      - name: Notify Create Completed
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üÜï ƒê√£ t·∫°o ${{ env.CREATED_LISTS }} lists, ${{ env.CREATED_RULES }} rules v√† th√™m ${{ env.ADDED_DOMAINS }} domains v√†o $VIETNAM_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Generate Final Summary
        if: always()
        run: |
          VIETNAM_DATE=$(TZ="Asia/Ho_Chi_Minh" date "+%d/%m/%Y %H:%M:%S")
          echo "----------------------------" >> $SUMMARY_FILE
          echo "Th·ªùi gian ho√†n th√†nh: $VIETNAM_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "Tr·∫°ng th√°i: ${{ job.status }}" >> $SUMMARY_FILE
          
          # Format summary for Telegram
          SUMMARY=$(cat $SUMMARY_FILE)
          
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="ho√†n th√†nh"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="th·∫•t b·∫°i"
          fi
          
          # Fix: Simplify message creation by using single quotes and avoiding backticks in YAML
          echo "${STATUS_EMOJI} Qu√° tr√¨nh c·∫≠p nh·∫≠t Cloudflare Gateway filter lists ƒë√£ ${STATUS_TEXT}" > /tmp/final_message.txt
          echo "" >> /tmp/final_message.txt  # Empty line
          echo "üìä *B√°o c√°o t√≥m t·∫Øt:*" >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues
          cat $SUMMARY_FILE >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues

      - name: Send Final Summary
        if: always()
        run: |
          # Send the full report using Markdown format
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat /tmp/final_message.txt)" \
            -d parse_mode=Markdown

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
