name: Update Filter Lists

on:
  schedule:
    # Run at 00:00 UTC every 3 days
    - cron: "0 0 */3 * *"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  SUMMARY_FILE: /tmp/filter_update_summary.txt

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"
          
      - name: Prepare Summary File
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "B√°o c√°o c·∫≠p nh·∫≠t Cloudflare Gateway filter lists" > $SUMMARY_FILE
          echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "----------------------------" >> $SUMMARY_FILE

      - name: Send Start Notification
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t Cloudflare Gateway filter lists v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: |
          npm ci
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ ƒê√£ c√†i ƒë·∫∑t c√°c dependencies v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download allowlists
        id: download-allowlist
        run: |
          # Th·ª±c hi·ªán download allowlist
          npm run download:allowlist
          
          # ƒê·∫øm s·ªë l∆∞·ª£ng filter trong allowlist b·∫±ng c√°ch ƒë·∫øm s·ªë d√≤ng trong file
          if [ -f "./allowlist.txt" ]; then
            FILTER_COUNT=$(wc -l < ./allowlist.txt | tr -d ' ')
          elif [ -f "./output/allowlist.txt" ]; then
            FILTER_COUNT=$(wc -l < ./output/allowlist.txt | tr -d ' ')
          elif [ -f "./dist/allowlist.txt" ]; then
            FILTER_COUNT=$(wc -l < ./dist/allowlist.txt | tr -d ' ')
          else
            # T√¨m b·∫•t k·ª≥ file n√†o c√≥ t√™n ch·ª©a "allowlist"
            ALLOWLIST_FILE=$(find . -name "*allowlist*" -type f | head -n 1)
            if [ -n "$ALLOWLIST_FILE" ]; then
              FILTER_COUNT=$(wc -l < "$ALLOWLIST_FILE" | tr -d ' ')
            else
              FILTER_COUNT="0"
            fi
          fi
          
          # L∆∞u s·ªë l∆∞·ª£ng filter v√†o bi·∫øn m√¥i tr∆∞·ªùng v√† summary
          echo "ALLOWLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
          echo "Allowlist filters: $FILTER_COUNT" >> $SUMMARY_FILE
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Notify Allowlists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng ${{ env.ALLOWLIST_COUNT }} filters trong allowlists v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download blocklists
        id: download-blocklist
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run download:blocklist 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/blocklist_output.log
          echo "Raw log output saved to /tmp/blocklist_output.log"
          
          # Extract filter count with more flexible patterns
          BLOCKLIST_COUNT=$(extract_number "$OUTPUT" "domain|blocklist" "0")
          echo "Detected blocklist count: $BLOCKLIST_COUNT"
          
          # Add to summary
          echo "BLOCKLIST_COUNT=$BLOCKLIST_COUNT" >> $GITHUB_ENV
          echo "Blocklist filters: $BLOCKLIST_COUNT" >> $SUMMARY_FILE
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Notify Blocklists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì• ƒê√£ t·∫£i xu·ªëng ${{ env.BLOCKLIST_COUNT }} filters trong blocklists v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Delete old rules and lists
        id: delete-rules
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-delete 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/delete_output.log
          echo "Raw log output saved to /tmp/delete_output.log"
          
          # Extract information with more flexible patterns
          DELETED_LISTS=$(extract_number "$OUTPUT" "list|deleted" "0")
          echo "Detected deleted lists: $DELETED_LISTS"
          
          DELETED_RULES=$(extract_number "$OUTPUT" "rule|deleted" "0")
          echo "Detected deleted rules: $DELETED_RULES"
          
          # Add to summary and environment variables
          echo "DELETED_LISTS=$DELETED_LISTS" >> $GITHUB_ENV
          echo "DELETED_RULES=$DELETED_RULES" >> $GITHUB_ENV
          echo "Deleted lists: $DELETED_LISTS" >> $SUMMARY_FILE
          echo "Deleted rules: $DELETED_RULES" >> $SUMMARY_FILE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Delete Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üóëÔ∏è ƒê√£ x√≥a ${{ env.DELETED_LISTS }} lists v√† ${{ env.DELETED_RULES }} rules v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Create new rules and lists
        id: create-rules
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-create 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/create_output.log
          echo "Raw log output saved to /tmp/create_output.log"
          
          # Extract information with more flexible patterns
          CREATED_LISTS=$(extract_number "$OUTPUT" "list|created" "0")
          echo "Detected created lists: $CREATED_LISTS"
          
          CREATED_RULES=$(extract_number "$OUTPUT" "rule|created" "0")
          echo "Detected created rules: $CREATED_RULES"
          
          ADDED_FILTERS=$(extract_number "$OUTPUT" "domain|added" "0")
          echo "Detected added filters: $ADDED_FILTERS"
          
          # Add to summary and environment variables
          echo "CREATED_LISTS=$CREATED_LISTS" >> $GITHUB_ENV
          echo "CREATED_RULES=$CREATED_RULES" >> $GITHUB_ENV
          echo "ADDED_FILTERS=$ADDED_FILTERS" >> $GITHUB_ENV
          echo "Created lists: $CREATED_LISTS" >> $SUMMARY_FILE
          echo "Created rules: $CREATED_RULES" >> $SUMMARY_FILE
          echo "Added filters: $ADDED_FILTERS" >> $SUMMARY_FILE
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Create Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üÜï ƒê√£ t·∫°o ${{ env.CREATED_LISTS }} lists, ${{ env.CREATED_RULES }} rules v√† th√™m ${{ env.ADDED_FILTERS }} filters v√†o $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Generate Final Summary
        if: always()
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "----------------------------" >> $SUMMARY_FILE
          echo "Th·ªùi gian ho√†n th√†nh: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "Tr·∫°ng th√°i: ${{ job.status }}" >> $SUMMARY_FILE
          
          # Format summary for Telegram
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="ho√†n th√†nh"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="th·∫•t b·∫°i"
          fi
          
          # Fix: Simplify message creation by using single quotes and avoiding backticks in YAML
          echo "${STATUS_EMOJI} Qu√° tr√¨nh c·∫≠p nh·∫≠t Cloudflare Gateway filter lists ƒë√£ ${STATUS_TEXT}" > /tmp/final_message.txt
          echo "" >> /tmp/final_message.txt  # Empty line
          echo "üìä *B√°o c√°o t√≥m t·∫Øt:*" >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues
          cat $SUMMARY_FILE >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues

      - name: Send Final Summary
        if: always()
        run: |
          # Send the full report using Markdown format
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat /tmp/final_message.txt)" \
            -d parse_mode=Markdown

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
