name: Update Filter Lists

on:
  schedule:
    # Run at 00:00 UTC every 3 days
    - cron: "0 0 */3 * *"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  SUMMARY_FILE: /tmp/filter_update_summary.txt

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"
          
      - name: Prepare Summary File
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "Báo cáo cập nhật Cloudflare Gateway filter lists" > $SUMMARY_FILE
          echo "Thời gian bắt đầu: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "----------------------------" >> $SUMMARY_FILE

      - name: Send Start Notification
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🔄 Bắt đầu cập nhật Cloudflare Gateway filter lists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: |
          npm ci
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="✅ Đã cài đặt các dependencies vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Count Allowlist Links
        id: count-allowlist
        run: |
          # Đếm số lượng link trong biến ALLOWLIST_URLS
          if [ -n "$ALLOWLIST_URLS" ]; then
            # Đếm số dòng không trống trong biến ALLOWLIST_URLS
            FILTER_COUNT=$(echo "$ALLOWLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "Số lượng link allowlist: $FILTER_COUNT"
          
          # Lưu số lượng link vào biến môi trường và summary
          echo "ALLOWLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
          echo "Allowlist filters: $FILTER_COUNT" >> $SUMMARY_FILE
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Download allowlists
        run: |
          # Thực hiện download allowlist
          npm run download:allowlist
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Notify Allowlists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="📥 Đã tải xuống ${{ env.ALLOWLIST_COUNT }} filters trong allowlists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Count Blocklist Links
        id: count-blocklist
        run: |
          # Đếm số lượng link trong biến BLOCKLIST_URLS
          if [ -n "$BLOCKLIST_URLS" ]; then
            # Đếm số dòng không trống trong biến BLOCKLIST_URLS
            FILTER_COUNT=$(echo "$BLOCKLIST_URLS" | grep -v "^[[:space:]]*$" | wc -l)
          else
            FILTER_COUNT="0"
          fi
          
          echo "Số lượng link blocklist: $FILTER_COUNT"
          
          # Lưu số lượng link vào biến môi trường và summary
          echo "BLOCKLIST_COUNT=$FILTER_COUNT" >> $GITHUB_ENV
          echo "Blocklist filters: $FILTER_COUNT" >> $SUMMARY_FILE
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Download blocklists
        run: |
          # Thực hiện download blocklist
          npm run download:blocklist
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Notify Blocklists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="📥 Đã tải xuống ${{ env.BLOCKLIST_COUNT }} filters trong blocklists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Delete old rules and lists
        id: delete-rules
        run: |
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-delete 2>&1)
          echo "$OUTPUT"
          
          # Đếm số lượng lists và rules đã xóa
          DELETED_LISTS=$(echo "$OUTPUT" | grep -E -i "deleted.*list" | grep -oE '[0-9]+' | head -n 1)
          if [ -z "$DELETED_LISTS" ]; then DELETED_LISTS="0"; fi
          
          DELETED_RULES=$(echo "$OUTPUT" | grep -E -i "deleted.*rule" | grep -oE '[0-9]+' | head -n 1)
          if [ -z "$DELETED_RULES" ]; then DELETED_RULES="0"; fi
          
          # Add to summary and environment variables
          echo "DELETED_LISTS=$DELETED_LISTS" >> $GITHUB_ENV
          echo "DELETED_RULES=$DELETED_RULES" >> $GITHUB_ENV
          echo "Deleted lists: $DELETED_LISTS" >> $SUMMARY_FILE
          echo "Deleted rules: $DELETED_RULES" >> $SUMMARY_FILE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Delete Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🗑️ Đã xóa ${{ env.DELETED_LISTS }} lists và ${{ env.DELETED_RULES }} rules vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Create new rules and lists
        id: create-rules
        run: |
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-create 2>&1)
          echo "$OUTPUT"
          
          # Đếm số lượng lists, rules và filters đã thêm
          CREATED_LISTS=$(echo "$OUTPUT" | grep -E -i "created.*list" | grep -oE '[0-9]+' | head -n 1)
          if [ -z "$CREATED_LISTS" ]; then CREATED_LISTS="0"; fi
          
          CREATED_RULES=$(echo "$OUTPUT" | grep -E -i "created.*rule" | grep -oE '[0-9]+' | head -n 1)
          if [ -z "$CREATED_RULES" ]; then CREATED_RULES="0"; fi
          
          # Tính tổng số filters từ số lượng link đã đếm trước đó
          ALLOW_COUNT="${{ env.ALLOWLIST_COUNT }}"
          BLOCK_COUNT="${{ env.BLOCKLIST_COUNT }}"
          if [[ -n "$ALLOW_COUNT" && -n "$BLOCK_COUNT" ]]; then
            ADDED_FILTERS=$((ALLOW_COUNT + BLOCK_COUNT))
          else
            ADDED_FILTERS="0"
          fi
          
          # Add to summary and environment variables
          echo "CREATED_LISTS=$CREATED_LISTS" >> $GITHUB_ENV
          echo "CREATED_RULES=$CREATED_RULES" >> $GITHUB_ENV
          echo "ADDED_FILTERS=$ADDED_FILTERS" >> $GITHUB_ENV
          echo "Created lists: $CREATED_LISTS" >> $SUMMARY_FILE
          echo "Created rules: $CREATED_RULES" >> $SUMMARY_FILE
          echo "Added filters: $ADDED_FILTERS" >> $SUMMARY_FILE
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Create Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🆕 Đã tạo ${{ env.CREATED_LISTS }} lists, ${{ env.CREATED_RULES }} rules và thêm ${{ env.ADDED_FILTERS }} filters vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Generate Final Summary
        if: always()
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "----------------------------" >> $SUMMARY_FILE
          echo "Thời gian hoàn thành: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "Trạng thái: ${{ job.status }}" >> $SUMMARY_FILE
          
          # Format summary for Telegram
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="hoàn thành"
          else
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="thất bại"
          fi
          
          # Fix: Simplify message creation by using single quotes and avoiding backticks in YAML
          echo "${STATUS_EMOJI} Quá trình cập nhật Cloudflare Gateway filter lists đã ${STATUS_TEXT}" > /tmp/final_message.txt
          echo "" >> /tmp/final_message.txt  # Empty line
          echo "📊 *Báo cáo tóm tắt:*" >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues
          cat $SUMMARY_FILE >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues

      - name: Send Final Summary
        if: always()
        run: |
          # Send the full report using Markdown format
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat /tmp/final_message.txt)" \
            -d parse_mode=Markdown

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
