name: Update Filter Lists

on:
  schedule:
    # Run at 00:00 UTC every 3 days
    - cron: "0 0 */3 * *"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  SUMMARY_FILE: /tmp/filter_update_summary.txt

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"
          
      - name: Prepare Summary File
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "Báo cáo cập nhật Cloudflare Gateway filter lists" > $SUMMARY_FILE
          echo "Thời gian bắt đầu: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "----------------------------" >> $SUMMARY_FILE

      - name: Send Start Notification
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🔄 Bắt đầu cập nhật Cloudflare Gateway filter lists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: |
          npm ci
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="✅ Đã cài đặt các dependencies vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Debug Script Installation
        run: |
          # Create a debug script to analyze log output and extract numbers
          cat > /tmp/extract_numbers.sh << 'EOL'
          #!/bin/bash
          
          # Function to extract numbers with fallback values
          extract_number() {
            local OUTPUT="$1"
            local PATTERN="$2"
            local DEFAULT="$3"
            
            # Try multiple patterns to be more flexible
            local NUMBER=""
            
            # Pattern 1: Number followed by pattern
            NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | grep -oE '[0-9]+' | head -1)
            
            # Pattern 2: Try to find pattern containing digits
            if [ -z "$NUMBER" ]; then
              NUMBER=$(echo "$OUTPUT" | grep -E "$PATTERN" | head -1 | grep -oE '[0-9]+')
            fi
            
            # Pattern 3: More general search
            if [ -z "$NUMBER" ]; then
              NUMBER=$(echo "$OUTPUT" | grep -iE "filter|list|rule" | grep -oE '[0-9]+' | head -1)
            fi
            
            # Return result or default
            if [ -z "$NUMBER" ]; then
              echo "$DEFAULT"
            else
              echo "$NUMBER"
            fi
          }
          
          # Export the function to make it available for calling scripts
          export -f extract_number
          EOL
          
          chmod +x /tmp/extract_numbers.sh
          source /tmp/extract_numbers.sh

      - name: Download allowlists
        id: download-allowlist
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run download:allowlist 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/allowlist_output.log
          echo "Raw log output saved to /tmp/allowlist_output.log"
          
          # Extract filter count with more robust pattern matching
          ALLOWLIST_COUNT=$(extract_number "$OUTPUT" "filter|allowlist" "0")
          echo "Detected allowlist count: $ALLOWLIST_COUNT"
          
          # Add to summary
          echo "Allowlist filters: $ALLOWLIST_COUNT" >> $SUMMARY_FILE
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Notify Allowlists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          ALLOWLIST_COUNT=$(grep "Allowlist filters" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="📥 Đã tải xuống $ALLOWLIST_COUNT filters trong allowlists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Download blocklists
        id: download-blocklist
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run download:blocklist 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/blocklist_output.log
          echo "Raw log output saved to /tmp/blocklist_output.log"
          
          # Extract filter count with more flexible patterns
          BLOCKLIST_COUNT=$(extract_number "$OUTPUT" "filter|blocklist" "0")
          echo "Detected blocklist count: $BLOCKLIST_COUNT"
          
          # Add to summary
          echo "Blocklist filters: $BLOCKLIST_COUNT" >> $SUMMARY_FILE
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Notify Blocklists Downloaded
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          BLOCKLIST_COUNT=$(grep "Blocklist filters" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="📥 Đã tải xuống $BLOCKLIST_COUNT filters trong blocklists vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Delete old rules and lists
        id: delete-rules
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-delete 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/delete_output.log
          echo "Raw log output saved to /tmp/delete_output.log"
          
          # Extract information with more flexible patterns
          DELETED_LISTS=$(extract_number "$OUTPUT" "list|deleted" "0")
          echo "Detected deleted lists: $DELETED_LISTS"
          
          DELETED_RULES=$(extract_number "$OUTPUT" "rule|deleted" "0")
          echo "Detected deleted rules: $DELETED_RULES"
          
          # Add to summary
          echo "Deleted lists: $DELETED_LISTS" >> $SUMMARY_FILE
          echo "Deleted rules: $DELETED_RULES" >> $SUMMARY_FILE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Delete Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          DELETED_LISTS=$(grep "Deleted lists" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          DELETED_RULES=$(grep "Deleted rules" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🗑️ Đã xóa $DELETED_LISTS lists và $DELETED_RULES rules vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      - name: Create new rules and lists
        id: create-rules
        run: |
          # Source the helper script
          source /tmp/extract_numbers.sh
          
          # Capture output for analysis
          OUTPUT=$(npm run cloudflare-create 2>&1)
          echo "$OUTPUT"
          
          # Save the raw output for debugging
          echo "$OUTPUT" > /tmp/create_output.log
          echo "Raw log output saved to /tmp/create_output.log"
          
          # Extract information with more flexible patterns
          CREATED_LISTS=$(extract_number "$OUTPUT" "list|created" "0")
          echo "Detected created lists: $CREATED_LISTS"
          
          CREATED_RULES=$(extract_number "$OUTPUT" "rule|created" "0")
          echo "Detected created rules: $CREATED_RULES"
          
          ADDED_FILTERS=$(extract_number "$OUTPUT" "filter|added" "0")
          echo "Detected added filters: $ADDED_FILTERS"
          
          # Add to summary
          echo "Created lists: $CREATED_LISTS" >> $SUMMARY_FILE
          echo "Created rules: $CREATED_RULES" >> $SUMMARY_FILE
          echo "Added filters: $ADDED_FILTERS" >> $SUMMARY_FILE
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Create Completed
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          CREATED_LISTS=$(grep "Created lists" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          CREATED_RULES=$(grep "Created rules" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          ADDED_FILTERS=$(grep "Added filters" $SUMMARY_FILE | cut -d ":" -f2 | tr -d ' ')
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🆕 Đã tạo $CREATED_LISTS lists, $CREATED_RULES rules và thêm $ADDED_FILTERS filters vào $BANGKOK_DATE (UTC+7)" \
            -d parse_mode=HTML

      # Removed problematic upload-artifact step

      - name: Generate Final Summary
        if: always()
        run: |
          BANGKOK_DATE=$(TZ="Asia/Bangkok" date "+%d/%m/%Y %H:%M:%S")
          echo "----------------------------" >> $SUMMARY_FILE
          echo "Thời gian hoàn thành: $BANGKOK_DATE (UTC+7)" >> $SUMMARY_FILE
          echo "Trạng thái: ${{ job.status }}" >> $SUMMARY_FILE
          
          # Format summary for Telegram
          SUMMARY=$(cat $SUMMARY_FILE)
          
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="hoàn thành"
          else
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="thất bại"
          fi
          
          # Fix: Simplify message creation by using single quotes and avoiding backticks in YAML
          echo "${STATUS_EMOJI} Quá trình cập nhật Cloudflare Gateway filter lists đã ${STATUS_TEXT}" > /tmp/final_message.txt
          echo "" >> /tmp/final_message.txt  # Empty line
          echo "📊 *Báo cáo tóm tắt:*" >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues
          cat $SUMMARY_FILE >> /tmp/final_message.txt
          echo '```' >> /tmp/final_message.txt  # Use single quotes to avoid YAML issues

      - name: Send Final Summary
        if: always()
        run: |
          # Send the full report using Markdown format
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$(cat /tmp/final_message.txt)" \
            -d parse_mode=Markdown

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
